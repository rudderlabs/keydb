// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/keydb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeService_Get_FullMethodName                  = "/keydb.NodeService/Get"
	NodeService_Put_FullMethodName                  = "/keydb.NodeService/Put"
	NodeService_GetNodeInfo_FullMethodName          = "/keydb.NodeService/GetNodeInfo"
	NodeService_LoadSnapshots_FullMethodName        = "/keydb.NodeService/LoadSnapshots"
	NodeService_CreateSnapshots_FullMethodName      = "/keydb.NodeService/CreateSnapshots"
	NodeService_Scale_FullMethodName                = "/keydb.NodeService/Scale"
	NodeService_ScaleComplete_FullMethodName        = "/keydb.NodeService/ScaleComplete"
	NodeService_ClearLoadedSnapshots_FullMethodName = "/keydb.NodeService/ClearLoadedSnapshots"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NodeService handles the core key-value operations
type NodeServiceClient interface {
	// Get retrieves values for multiple keys
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Put stores multiple key-value pairs with TTL
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// GetNodeInfo returns information about the node and the cluster
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error)
	// LoadSnapshots forces the node to load all snapshots from cloud storage
	LoadSnapshots(ctx context.Context, in *LoadSnapshotsRequest, opts ...grpc.CallOption) (*LoadSnapshotsResponse, error)
	// CreateSnapshots forces the creation of snapshots for all hash ranges
	CreateSnapshots(ctx context.Context, in *CreateSnapshotsRequest, opts ...grpc.CallOption) (*CreateSnapshotsResponse, error)
	// Scale changes the number of nodes in the cluster
	Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error)
	// ScaleComplete is used by the scaler to notify all nodes that the scale is complete and they can now start serving traffic again
	ScaleComplete(ctx context.Context, in *ScaleCompleteRequest, opts ...grpc.CallOption) (*ScaleCompleteResponse, error)
	// ClearLoadedSnapshots clears all loaded snapshot checkpoints
	ClearLoadedSnapshots(ctx context.Context, in *ClearLoadedSnapshotsRequest, opts ...grpc.CallOption) (*ClearLoadedSnapshotsResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, NodeService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, NodeService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeInfoResponse)
	err := c.cc.Invoke(ctx, NodeService_GetNodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) LoadSnapshots(ctx context.Context, in *LoadSnapshotsRequest, opts ...grpc.CallOption) (*LoadSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadSnapshotsResponse)
	err := c.cc.Invoke(ctx, NodeService_LoadSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) CreateSnapshots(ctx context.Context, in *CreateSnapshotsRequest, opts ...grpc.CallOption) (*CreateSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotsResponse)
	err := c.cc.Invoke(ctx, NodeService_CreateSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleResponse)
	err := c.cc.Invoke(ctx, NodeService_Scale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) ScaleComplete(ctx context.Context, in *ScaleCompleteRequest, opts ...grpc.CallOption) (*ScaleCompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleCompleteResponse)
	err := c.cc.Invoke(ctx, NodeService_ScaleComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) ClearLoadedSnapshots(ctx context.Context, in *ClearLoadedSnapshotsRequest, opts ...grpc.CallOption) (*ClearLoadedSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearLoadedSnapshotsResponse)
	err := c.cc.Invoke(ctx, NodeService_ClearLoadedSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility.
//
// NodeService handles the core key-value operations
type NodeServiceServer interface {
	// Get retrieves values for multiple keys
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Put stores multiple key-value pairs with TTL
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// GetNodeInfo returns information about the node and the cluster
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error)
	// LoadSnapshots forces the node to load all snapshots from cloud storage
	LoadSnapshots(context.Context, *LoadSnapshotsRequest) (*LoadSnapshotsResponse, error)
	// CreateSnapshots forces the creation of snapshots for all hash ranges
	CreateSnapshots(context.Context, *CreateSnapshotsRequest) (*CreateSnapshotsResponse, error)
	// Scale changes the number of nodes in the cluster
	Scale(context.Context, *ScaleRequest) (*ScaleResponse, error)
	// ScaleComplete is used by the scaler to notify all nodes that the scale is complete and they can now start serving traffic again
	ScaleComplete(context.Context, *ScaleCompleteRequest) (*ScaleCompleteResponse, error)
	// ClearLoadedSnapshots clears all loaded snapshot checkpoints
	ClearLoadedSnapshots(context.Context, *ClearLoadedSnapshotsRequest) (*ClearLoadedSnapshotsResponse, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNodeServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedNodeServiceServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedNodeServiceServer) LoadSnapshots(context.Context, *LoadSnapshotsRequest) (*LoadSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSnapshots not implemented")
}
func (UnimplementedNodeServiceServer) CreateSnapshots(context.Context, *CreateSnapshotsRequest) (*CreateSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshots not implemented")
}
func (UnimplementedNodeServiceServer) Scale(context.Context, *ScaleRequest) (*ScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scale not implemented")
}
func (UnimplementedNodeServiceServer) ScaleComplete(context.Context, *ScaleCompleteRequest) (*ScaleCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleComplete not implemented")
}
func (UnimplementedNodeServiceServer) ClearLoadedSnapshots(context.Context, *ClearLoadedSnapshotsRequest) (*ClearLoadedSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLoadedSnapshots not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}
func (UnimplementedNodeServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_LoadSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).LoadSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_LoadSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).LoadSnapshots(ctx, req.(*LoadSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_CreateSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).CreateSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_CreateSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).CreateSnapshots(ctx, req.(*CreateSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Scale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Scale(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_ScaleComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ScaleComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_ScaleComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ScaleComplete(ctx, req.(*ScaleCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_ClearLoadedSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLoadedSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ClearLoadedSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_ClearLoadedSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ClearLoadedSnapshots(ctx, req.(*ClearLoadedSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keydb.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NodeService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _NodeService_Put_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _NodeService_GetNodeInfo_Handler,
		},
		{
			MethodName: "LoadSnapshots",
			Handler:    _NodeService_LoadSnapshots_Handler,
		},
		{
			MethodName: "CreateSnapshots",
			Handler:    _NodeService_CreateSnapshots_Handler,
		},
		{
			MethodName: "Scale",
			Handler:    _NodeService_Scale_Handler,
		},
		{
			MethodName: "ScaleComplete",
			Handler:    _NodeService_ScaleComplete_Handler,
		},
		{
			MethodName: "ClearLoadedSnapshots",
			Handler:    _NodeService_ClearLoadedSnapshots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/keydb.proto",
}
