GO := go
TESTFILE    := _testok
DOCKER_USER :=

GOLANG_CI				:= github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.3.1
GOFUMPT					:= mvdan.cc/gofumpt@latest
GOVULNCHECK				:= golang.org/x/vuln/cmd/govulncheck@latest
GOIMPORTS 				:= golang.org/x/tools/cmd/goimports@latest
MOCKGEN 				:= github.com/golang/mock/mockgen@v1.6.0
GOTESTSUM				:= gotest.tools/gotestsum@v1.11.0

# go tools versions
protoc-gen-go=google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.6
protoc-gen-go-grpc=google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.5.1

# Default target
default: lint

help: ## Show the available commands
	@grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

test: install-tools test-run test-teardown

test-run: ## Run all unit tests
	$(eval TEST_CMD = gotestsum --format pkgname-and-test-fails --)
	$(eval TEST_OPTIONS = -race -p=1 -v -failfast -shuffle=on -coverprofile=profile.out -covermode=atomic -coverpkg=./... -vet=all --timeout=15m)
ifdef package
ifdef exclude
	$(eval FILES = `go list ./$(package)/... | egrep -iv '$(exclude)'`)
	$(TEST_CMD) -count=1 $(TEST_OPTIONS) $(FILES) && touch $(TESTFILE) || true
else
	$(TEST_CMD) $(TEST_OPTIONS) ./$(package)/... && touch $(TESTFILE) || true
endif
else ifdef exclude
	$(eval FILES = `go list ./... | egrep -iv '$(exclude)'`)
	$(TEST_CMD) -count=1 $(TEST_OPTIONS) $(FILES) && touch $(TESTFILE) || true
else
	$(TEST_CMD) -count=1 $(TEST_OPTIONS) ./... && touch $(TESTFILE) || true
endif

test-teardown:
	@if [ -f "$(TESTFILE)" ]; then \
    	echo "Tests passed, tearing down..." ;\
		rm -f $(TESTFILE) ;\
		echo "mode: atomic" > coverage.txt ;\
		find . -name "profile.out" | while read file; do grep -v 'mode: atomic' $${file} >> coverage.txt; rm -f $${file}; done ;\
	else \
    	rm -f coverage.txt coverage.html ; find . -name "profile.out" | xargs rm -f ;\
		echo "Tests failed :-(" ;\
		exit 1 ;\
	fi

coverage: ## Generate HTML coverage report
	go tool cover -html=coverage.txt -o coverage.html

test-with-coverage: test coverage

.PHONY: install-tools
install-tools:
	$(GO) install $(protoc-gen-go)
	$(GO) install $(protoc-gen-go-grpc)
	$(GO) install $(MOCKGEN)
	$(GO) install $(GOTESTSUM)

# Generate protobuf files
.PHONY: proto
proto: install-tools
	@echo "Generating protobuf files..."
	protoc --go_out=paths=source_relative:. proto/*.proto
	protoc --go-grpc_out=paths=source_relative:. proto/*.proto

build:
	@if [ -z "$(DOCKER_USER)" ]; then \
		echo "Error: DOCKER_USER variable is empty"; \
		exit 1; \
	fi
	docker build -t $(DOCKER_USER)/keydb:latest .
	docker push $(DOCKER_USER)/keydb:latest

build-scaler:
	@if [ -z "$(DOCKER_USER)" ]; then \
		echo "Error: DOCKER_USER variable is empty"; \
		exit 1; \
	fi
	docker build -t $(DOCKER_USER)/rudder-keydb-scaler:latest -f Dockerfile-scaler .
	docker push $(DOCKER_USER)/rudder-keydb-scaler:latest

run:
	@if [ -z "$(DOCKER_USER)" ]; then \
		echo "Error: DOCKER_USER variable is empty"; \
		exit 1; \
	fi
	docker run --rm -it -p 50051:50051 \
		-e KEYDB_PORT=50051 \
		-e KEYDB_BADGERDB_DEDUP_COMPRESS=true \
		$(DOCKER_USER)/keydb:latest

deploy-scaler:
	@if [ -z "$(NAMESPACE)" ]; then \
		echo "Error: NAMESPACE variable is empty"; \
		exit 1; \
	fi
	@if [ -z "$(DOCKER_USER)" ]; then \
		echo "Error: DOCKER_USER variable is empty"; \
		exit 1; \
	fi
	helm upgrade --install keydb-scaler ./helm/keydb-scaler \
		--namespace $(NAMESPACE) \
		--set image.repository=$(DOCKER_USER)/rudder-keydb-scaler

.PHONY: lint
lint: fmt vulncheck ## Run linters on all go files
	$(GO) run $(GOLANG_CI) run -v

.PHONY: lint-novuln
lint-novuln: fmt ## Run linters on all go files
	$(GO) run $(GOLANG_CI) run -v

.PHONY: vulncheck
vulncheck: ## Check for vulnerabilities in dependencies
	$(GO) run $(GOVULNCHECK) ./...

fmt: install-tools ## Formats all go
	$(GO) run $(GOFUMPT) -l -w -extra  .
	find . -type f -name '*.go' -exec grep -L -E 'Code generated by .*\. DO NOT EDIT.' {} + | xargs $(GO) run $(GOIMPORTS) -format-only -w -local=github.com/rudderlabs
	./build/docker-go-version.sh Dockerfile
	./build/docker-go-version.sh Dockerfile-scaler

mocks: install-tools ## Generate all mocks
	$(GO) generate ./...
